# Generated by Django 2.2.12 on 2020-05-14 20:10
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    dependencies = [("reporting", "0115_azure_adding_source_uuid")]

    operations = [
        migrations.RunSQL(
            # Got to drop these views as we are changing the type of a selected column
            # They will be recreated below
            # Cody Question: Do I always need to drop the index? it seems like azure didn't do it this time.
            sql="""
DROP INDEX IF EXISTS ocpazure_cost_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary;

DROP INDEX IF EXISTS ocpazure_cost_summary_account;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary_by_account;

DROP INDEX IF EXISTS ocpazure_cost_summary_location;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary_by_location;

DROP INDEX IF EXISTS ocpazure_cost_summary_service;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_cost_summary_by_service;

DROP INDEX IF EXISTS ocpazure_compute_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_compute_summary;

DROP INDEX IF EXISTS ocpazure_storage_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_storage_summary;

DROP INDEX IF EXISTS ocpazure_network_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_network_summary;

DROP INDEX IF EXISTS ocpazure_database_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpazure_database_summary;
            """
        ),
        migrations.AddField(
            model_name="ocpazurecostlineitemdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.AddField(
            model_name="ocpazurecostlineitemprojectdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.RunSQL(
            # Got to drop these views as we are changing the type of a selected column
            # They will be recreated below
            sql="""
CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias
)
;

CREATE UNIQUE INDEX ocpazure_cost_summary
ON reporting_ocpazure_cost_summary (usage_start, cluster_id, cluster_alias)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary_by_account AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, subscription_guid) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        subscription_guid,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, subscription_guid
)
;

CREATE UNIQUE INDEX ocpazure_cost_summary_account
ON reporting_ocpazure_cost_summary_by_account (usage_start, cluster_id, cluster_alias, subscription_guid)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary_by_location AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, resource_location) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        resource_location,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, resource_location
)
;

CREATE UNIQUE INDEX ocpazure_cost_summary_location
ON reporting_ocpazure_cost_summary_by_location (usage_start, cluster_id, cluster_alias, resource_location)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_cost_summary_by_service AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        service_name,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, service_name
)
;

CREATE UNIQUE INDEX ocpazure_cost_summary_service
ON reporting_ocpazure_cost_summary_by_service (usage_start, cluster_id, cluster_alias, service_name)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_compute_summary AS(
    SELECT ROW_NUMBER() OVER(ORDER BY usage_start, cluster_id, cluster_alias, instance_type, resource_id) AS id,
        usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        instance_type,
        resource_id,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
        AND instance_type IS NOT NULL
    GROUP BY usage_start, cluster_id, cluster_alias, instance_type, resource_id
)
WITH DATA
;

CREATE UNIQUE INDEX ocpazure_compute_summary
    ON reporting_ocpazure_compute_summary (usage_start, cluster_id, cluster_alias, instance_type, resource_id)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_storage_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        service_name,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE service_name LIKE '%Storage%'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, service_name
)
;

CREATE UNIQUE INDEX ocpazure_storage_summary
ON reporting_ocpazure_storage_summary (usage_start, cluster_id, cluster_alias, service_name)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_network_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        service_name,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE service_name IN ('Virtual Network','VPN','DNS','Traffic Manager','ExpressRoute','Load Balancer','Application Gateway')
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, service_name
)
;

CREATE UNIQUE INDEX ocpazure_network_summary
ON reporting_ocpazure_network_summary (usage_start, cluster_id, cluster_alias, service_name)
;

CREATE MATERIALIZED VIEW reporting_ocpazure_database_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, service_name) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        service_name,
        sum(usage_quantity) as usage_quantity,
        max(unit_of_measure) as unit_of_measure,
        sum(pretax_cost) as pretax_cost,
        sum(markup_cost) as markup_cost,
        max(currency) as currency,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpazurecostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE service_name IN ('Cosmos DB','Cache for Redis') OR service_name ILIKE '%database%'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, service_name
)
;

CREATE UNIQUE INDEX ocpazure_database_summary
ON reporting_ocpazure_database_summary (usage_start, cluster_id, cluster_alias, service_name)
;
            """
        ),
    ]

# Generated by Django 2.2.12 on 2020-05-14 22:17
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    dependencies = [("reporting", "0116_ocpazure_adding_source_uuid")]

    operations = [
        migrations.RunSQL(
            # Got to drop these views as we are changing the type of a selected column
            # They will be recreated below
            sql="""
DROP INDEX IF EXISTS ocpaws_cost_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary;

DROP INDEX IF EXISTS ocpaws_cost_summary_account;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary_by_account;

DROP INDEX IF EXISTS ocpaws_cost_summary_service;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary_by_service;

DROP INDEX IF EXISTS ocpaws_cost_summary_region;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_cost_summary_by_region;

DROP INDEX IF EXISTS ocpaws_compute_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_compute_summary;

DROP INDEX IF EXISTS ocpaws_storage_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_storage_summary;

DROP INDEX IF EXISTS ocpaws_network_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_network_summary;

DROP INDEX IF EXISTS ocpaws_database_summary;
DROP MATERIALIZED VIEW IF EXISTS reporting_ocpaws_database_summary;
            """
        ),
        migrations.AddField(
            model_name="ocpawscostlineitemdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.AddField(
            model_name="ocpawscostlineitemprojectdailysummary", name="source_uuid", field=models.UUIDField(null=True)
        ),
        migrations.RunSQL(
            # Got to drop these views as we are changing the type of a selected column
            # They will be recreated below
            sql="""
CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_cost_summary
ON reporting_ocpaws_cost_summary (usage_start, cluster_id, cluster_alias)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary_by_account AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, usage_account_id, account_alias_id) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        usage_account_id,
        account_alias_id,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, usage_account_id, account_alias_id
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_cost_summary_account
ON reporting_ocpaws_cost_summary_by_account (usage_start, cluster_id, cluster_alias, usage_account_id, account_alias_id)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary_by_service AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, product_code, product_family) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        product_code,
        product_family,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, product_code, product_family
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_cost_summary_service
ON reporting_ocpaws_cost_summary_by_service (usage_start, cluster_id, cluster_alias, product_code, product_family)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_cost_summary_by_region AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, region, availability_zone) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        region,
        availability_zone,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, region, availability_zone
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_cost_summary_region
ON reporting_ocpaws_cost_summary_by_region (usage_start, cluster_id, cluster_alias, region, availability_zone)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_compute_summary AS(
    SELECT ROW_NUMBER() OVER(ORDER BY usage_start, cluster_id, cluster_alias, instance_type, resource_id) AS id,
        usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        instance_type,
        resource_id,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    WHERE usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
        AND instance_type IS NOT NULL
    GROUP BY usage_start, cluster_id, cluster_alias, instance_type, resource_id
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_compute_summary
    ON reporting_ocpaws_compute_summary (usage_start, cluster_id, cluster_alias, instance_type, resource_id)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_storage_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, product_family) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        product_family,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_family LIKE '%Storage%'
        AND unit = 'GB-Mo'
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, product_family
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_storage_summary
ON reporting_ocpaws_storage_summary (usage_start, cluster_id, cluster_alias, product_family)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_network_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, product_code) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        product_code,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_code IN ('AmazonVPC','AmazonCloudFront','AmazonRoute53','AmazonAPIGateway')
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, product_code
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_network_summary
ON reporting_ocpaws_network_summary (usage_start, cluster_id, cluster_alias, product_code)
;

CREATE MATERIALIZED VIEW reporting_ocpaws_database_summary AS(
    SELECT row_number() OVER(ORDER BY usage_start, cluster_id, cluster_alias, product_code) as id,
        usage_start as usage_start,
        usage_start as usage_end,
        cluster_id,
        cluster_alias,
        product_code,
        sum(usage_amount) as usage_amount,
        max(unit) as unit,
        sum(unblended_cost) as unblended_cost,
        sum(markup_cost) as markup_cost,
        max(currency_code) as currency_code,
        ARRAY_AGG (DISTINCT source_uuid) source_uuid
    FROM reporting_ocpawscostlineitem_daily_summary
    -- Get data for this month or last month
    WHERE product_code IN ('AmazonRDS','AmazonDynamoDB','AmazonElastiCache','AmazonNeptune','AmazonRedshift','AmazonDocumentDB')
        AND usage_start >= DATE_TRUNC('month', NOW() - '1 month'::interval)::date
    GROUP BY usage_start, cluster_id, cluster_alias, product_code
)
WITH DATA
;

CREATE UNIQUE INDEX ocpaws_database_summary
ON reporting_ocpaws_database_summary (usage_start, cluster_id, cluster_alias, product_code)
;
            """
        ),
    ]
